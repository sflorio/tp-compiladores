package simplelanguage;
import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import java.util.HashMap;
import simplelanguage.code;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;


/* Terminales sin atributo */
terminal INICIO, FIN;
terminal PUNTOYCOMA, MAS, MENOS, POR, DIVISION, MODULO,ACCUMULATOR, PlUSONEACCUMULATOR, ASIGNACION, IDENTIFIER, IMPRIMIR;
terminal IF, THEN, ELSE, LOOP, IGUALDAD, DESIGUALDAD;
terminal LPAREN, RPAREN;
terminal L_LLAVE, R_LLAVE;


/* Terminales con atributo asociado */
terminal Integer NUMERO;

/* No terminales sin atributo */

non terminal program, stmt, stmt_list, assign_stmt, if_stmt, loop_stmt, print_stmt, bool_expr;

/* No terminales con atributo asociado */
non terminal Integer expression;

/* Precedencias */
precedence left MAS, MENOS;
precedence left POR, DIVISION, MODULO;

start with program;

/* Reglas de Gramatica */


program ::= INICIO stmt_list FIN;

stmt_list ::= stmt_list:sl stmt:s PUNTOYCOMA
			/*| stmt_list:sl error:e PUNTOYCOMA*/
			| /* Empty*/
			;
			
stmt ::=  assign_stmt:a
		| print_stmt:p			
		| expression:e
		| bool_expr:b
		| if_stmt:i
		| loop_stmt:w
		| /* Empty*/
;

assign_stmt ::= IDENTIFIER:v ASIGNACION expression:e
				{: code.Put((String)v, e); RESULT = v; :};

print_stmt ::=    IMPRIMIR LPAREN expression:e RPAREN {: System.out.println(Integer.toString(e)); RESULT = e; :}
				| IMPRIMIR LPAREN bool_expr:e RPAREN {: System.out.println(code.GetBoolString(e)); RESULT = e; :}
		;


if_stmt ::= IF LPAREN bool_expr:c RPAREN THEN L_LLAVE stmt_list:s R_LLAVE
			{: if((Boolean)c){ RESULT = s; } :}
			
			| IF LPAREN bool_expr:c RPAREN THEN L_LLAVE stmt_list:s1 R_LLAVE ELSE L_LLAVE stmt_list:s2 R_LLAVE
			{: if((Boolean)c){ RESULT = s1; } else { RESULT = s2; } :}
            ;

/*terminar*/            
loop_stmt ::=  
				LOOP LPAREN expression:e RPAREN L_LLAVE IDENTIFIER:v ACCUMULATOR expression:e1 PUNTOYCOMA R_LLAVE
				{:					
					Integer variableValue= (Integer)code.GetIntValue(v);
					for( Integer i = 0; i < e.intValue(); i++)
					{
						variableValue = variableValue +e1;
					}
					code.Put((String)v, variableValue);					
					RESULT = code.Get(v);				
				:}
				|
				LOOP LPAREN expression:e RPAREN L_LLAVE IDENTIFIER:v PlUSONEACCUMULATOR PUNTOYCOMA R_LLAVE
				{:	
					for( Integer i = 0; i < e.intValue(); i++)
					{
						Integer variableValue = code.GetIntValue(v);					
						code.Put(v, variableValue + 1 );
					}
					RESULT = code.Get(v);				
				:}
				|
				LOOP LPAREN expression:e RPAREN L_LLAVE print_stmt:s PUNTOYCOMA R_LLAVE
				{:
					for( Integer i = 0; i < e.intValue(); i++){
						System.out.println(String.valueOf(s));
					}											 
				:}
 				;


bool_expr ::=  expression:s1 IGUALDAD expression:s2
				{: RESULT = ( s1 == s2);  :}
			  | expression:s1 DESIGUALDAD expression:s2 
			  	{: RESULT = ( s1 != s2); :}
			  /*| expression:s1 
			  	{: RESULT = ( s1 ); :}*/
			  ;
		
expression ::= expression:e1 MAS expression:e2
		{: RESULT = new Integer(e1.intValue() + e2.intValue()); :}
		| expression:e1 MENOS expression:e2
		{: RESULT = new Integer(e1.intValue() - e2.intValue()); :}
		| expression:e1 POR expression:e2
		{: RESULT = new Integer(e1.intValue() * e2.intValue()); :}
		| expression:e1 DIVISION expression:e2
		{: RESULT = new Integer(e1.intValue() / e2.intValue()); :}
		| expression:e1 MODULO expression:e2
		{: RESULT = new Integer(e1.intValue() % e2.intValue()); :}
		| NUMERO:n
		{: RESULT = n; :}
		| IDENTIFIER:v
		{: RESULT = code.GetIntValue(v); :}
		| IDENTIFIER:v PlUSONEACCUMULATOR
		{: 
			code.Put((String)v, code.GetIntValue(v) + 1); 
			RESULT = code.GetIntValue(v); 
		:}		
		| IDENTIFIER:v ACCUMULATOR expression:e1
		{: 
			Integer variableValue= (Integer)code.GetIntValue(v);
			code.Put((String)v, variableValue + e1); 
			RESULT = code.GetIntValue(v);
		:}		
		| LPAREN expression:e RPAREN
		{: RESULT = e; :}
		;