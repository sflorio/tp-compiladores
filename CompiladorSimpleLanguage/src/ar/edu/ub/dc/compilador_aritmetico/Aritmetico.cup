package ar.edu.ub.dc.compilador_aritmetico;
import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import java.util.HashMap;


action code {:
	
	public static HashMap<String, Object> hm = new HashMap<>();
	
	
	public static void Put(String identifier, Object value) {
		hm.put(identifier, value);
	}
			   			   
	public static Object Get(String identifier) {
		return hm.get(identifier);
	}
   
	public static void Show(String value) {
		System.out.println("Resultado: " +  value);
		System.out.println("Fin de ejecucion.");
	}
	
:};

/* Terminales sin atributo */
terminal INICIO, FIN;
terminal PUNTOYCOMA, MAS, MENOS, POR, DIVISION, MODULO, ASIGNACION, IDENTIFIER, IMPRIMIR;
terminal LPAREN, RPAREN;


/* Terminales con atributo asociado */
terminal Integer NUMERO;

/* No terminales sin atributo */
non terminal program, stmt_list, stmt;

/* No terminales con atributo asociado */
non terminal Integer expression;

/* Precedencias */
precedence left MAS, MENOS;
precedence left POR, DIVISION, MODULO;

start with program;

/* Reglas de Gramatica */


program ::= INICIO stmt_list FIN;

stmt_list ::= stmt_list stmt PUNTOYCOMA
			| stmt_list error PUNTOYCOMA
			|
			;
			
stmt ::= IDENTIFIER:v
				{: RESULT = Get((String)v); :}
			| IDENTIFIER:v ASIGNACION expression:e  
				{:  Put((String)v, e); :}
			| IDENTIFIER:v1 ASIGNACION IDENTIFIER:v2 
				{:
					Put((String)v1, Get((String)v2));					
				:}				
			| expression:e
			| IMPRIMIR IDENTIFIER:v
			{:
				System.out.println(Get((String)v));
			:}
			|
;


		
expression ::= expression:e1 MAS expression:e2
		{: RESULT = new Integer(e1.intValue() + e2.intValue()); :}
		| expression:e1 MENOS expression:e2
		{: RESULT = new Integer(e1.intValue() - e2.intValue()); :}
		| expression:e1 POR expression:e2
		{: RESULT = new Integer(e1.intValue() * e2.intValue()); :}
		| expression:e1 DIVISION expression:e2
		{: RESULT = new Integer(e1.intValue() / e2.intValue()); :}
		| expression:e1 MODULO expression:e2
		{: RESULT = new Integer(e1.intValue() % e2.intValue()); :}
		| NUMERO:n
		{: RESULT = n; :}
		| LPAREN expression:e RPAREN
		{: RESULT = e; :}
		;